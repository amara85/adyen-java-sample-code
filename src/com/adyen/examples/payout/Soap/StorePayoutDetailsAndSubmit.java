package com.adyen.examples.payout.Soap;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.ws.BindingProvider;

import com.adyen.services.common.Amount;
import com.adyen.services.payment.BankAccount;
import com.adyen.services.payment.Recurring;
import com.adyen.services.payout.PayoutPortType;
import com.adyen.services.payout.PayoutService;
import com.adyen.services.payout.StoreDetailAndSubmitRequest;
import com.adyen.services.payout.StoreDetailAndSubmitResponse2;

/**
 * Store and Submit Payout (SOAP)
 * 
 * You can also decide to both store the details and make a Payout request in a single webservice call. This is done by
 * adding the amount field and using the storeDetailAndSubmit method instead of the storeDetail method. This example
 * shows how to perform such a request (in this case with a bank account) using SOAP.
 * 
 * Please note: the Payout functionality is set up as a 2-step process. Because of this there are two additional
 * Webservice User accounts needed to use the Payout process. Please request the Payout permission for a specific user
 * account with Adyen Support. The password can be set in Adyen CA >> Settings >> Users.
 * 
 * @link /9.Payout/Soap/StorePayoutDetailsAndSubmit
 * @author Created by Adyen - Payments Made Easy
 */

@WebServlet(urlPatterns = { "/9.Payout/Soap/StorePayoutDetailsAndSubmit" })
public class StorePayoutDetailsAndSubmit extends HttpServlet {

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		/**
		 * SOAP settings
		 * - wsdl: the WSDL url you are using (Test/Live)
		 * - wsUser: your web service user to store Payout details, and to initiate a Payout
		 * - wsPassword: your web service user's password
		 */
		String wsdl = "https://pal-test.adyen.com/pal/servlet/Soap/Payout?wsdl";
		String wsUser = "YourWSUser";
		String wsPassword = "YourWSPassword";

		/**
		 * Create SOAP client, using classes in adyen-wsdl-cxf.jar library (generated by wsdl2java tool, Apache CXF).
		 * 
		 * @see WebContent/WEB-INF/lib/adyen-wsdl-cxf.jar
		 */
		PayoutService service = new PayoutService(new URL(wsdl));
		PayoutPortType client = service.getPayoutHttpPort();

		// Set HTTP Authentication
		((BindingProvider) client).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, wsUser);
		((BindingProvider) client).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, wsPassword);

		/**
		 * To submit the payout details and make a payout request, call the storeDetailAndSubmit action on the Payout
		 * Service. The storeDetailAndSubmit request has the following fields:
		 * 
		 * <pre>
		 * - recurring
		 *     - contract       : The contract value of the recurring object should be present and contain value PAYOUT.
		 * - merchantAccount    : The merchant account you want to process this payout with.
		 * - amount
		 *     - currencyCode   : The three character ISO currency code.
		 *     - value          : The payout amount in minor units (e.g. EUR 1,00 = 100).
		 * - reference          : The (merchant) reference for this payout. This reference will be used in all
		 *                        communication to the merchant about the status of the payout and the created payment
		 *                        (after confirmation of the payout).
		 *                        Although it is a good idea to make sure it is unique, this is not a requirement.
		 * - shopperEmail       : The email address of the shopper.
		 * - shopperReference   : The reference to the shopper. This value identifies an unique shopper. Therefore you
		 *                        have to make sure that this value is different for multiple shoppers.
		 * - shopperStatement   : The description of this payout. This description is shown on the bank statement of
		 *                        the shopper (if this is supported by the chosen payment method, optional).
		 * - fraudOffset        : A integer that is added to normal fraud score, either positive or negative (optional).
		 * - bank
		 *     - iban           : The complete IBAN number of the shopper.
		 *     - bic            : The associated bic number of the bank.
		 *     - bankName       : The name of the bank from the shopper.
		 *     - countryCode    : The country code of where the bank of the shopper is based.
		 *     - ownerName      : The name which is used to register the bank account number.
		 * </pre>
		 */

		// Create new store details and submit request
		StoreDetailAndSubmitRequest payoutRequest = new StoreDetailAndSubmitRequest();
		payoutRequest.setMerchantAccount("YourMerchantAccount");
		payoutRequest.setReference("TEST-PAYOUT-" + new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss").format(new Date()));
		payoutRequest.setShopperEmail("test@shopper.com");
		payoutRequest.setShopperReference("ShopperReference");
		payoutRequest.setShopperStatement("ShopperStatement");
		payoutRequest.setFraudOffset(0);

		// Set recurring contract
		Recurring recurring = new Recurring();
		recurring.setContract("PAYOUT");
		payoutRequest.setRecurring(recurring);

		// Set bank account
		BankAccount bankAccount = new BankAccount();
		bankAccount.setIban("NL13TEST0123456789");
		bankAccount.setBic("TESTNL01");
		bankAccount.setBankName("TestBank");
		bankAccount.setCountryCode("NL");
		bankAccount.setOwnerName("Test Shopper");
		payoutRequest.setBank(bankAccount);

		// Set amount
		Amount amount = new Amount();
		amount.setCurrency("EUR");
		amount.setValue(1000L);
		payoutRequest.setAmount(amount);

		/**
		 * Send the store details and submit request.
		 */
		StoreDetailAndSubmitResponse2 storeDetailsAndSubmitResult = client.storeDetailAndSubmit(payoutRequest);

		/**
		 * If the message is syntactically valid and merchantAccount is correct you will receive a
		 * storeDetailsAndSubmitResponse with the following fields:
		 * 
		 * <pre>
		 * - pspReference      : A new reference to uniquely identify this Payout request.
		 * - resultCode        : In case of success, this will be [payout-submit-received] or, in case of an error,
		 *                       an informational message will be returned.
		 * - refusalReason     : In case of refusal, an informational message for the reason.
		 * </pre>
		 * 
		 * You should not expect to receive a Notification at this time as it has not yet been confirmed.
		 */
		PrintWriter out = response.getWriter();

		out.println("Store Details and Submit Result:");
		out.println("- pspReference: " + storeDetailsAndSubmitResult.getPspReference());
		out.println("- resultCode: " + storeDetailsAndSubmitResult.getResultCode());
		out.println("- refusalReason: " + storeDetailsAndSubmitResult.getRefusalReason());

	}

}
