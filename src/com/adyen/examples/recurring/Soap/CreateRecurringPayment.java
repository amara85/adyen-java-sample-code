package com.adyen.examples.recurring.Soap;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.ws.BindingProvider;

import com.adyen.services.common.Amount;
import com.adyen.services.payment.Card;
import com.adyen.services.payment.PaymentPortType;
import com.adyen.services.payment.PaymentRequest;
import com.adyen.services.payment.PaymentResult;
import com.adyen.services.payment.PaymentService;
import com.adyen.services.payment.Recurring;
import com.adyen.services.payment.ServiceException;

/**
 * Create Recurring Payment (SOAP)
 * 
 * You can submit a recurring payment using a specific recurringDetails record or by using the last created
 * recurringDetails record. The request for the recurring payment is done using a paymentRequest. This file shows how a
 * recurring payment can be submitted using our SOAP API.
 * 
 * Please note: using our API requires a web service user. Set up your Webservice user:
 * Adyen CA >> Settings >> Users >> ws@Company. >> Generate Password >> Submit
 * 
 * @link /5.Recurring/Soap/CreateRecurringPayment
 * @author Created by Adyen - Payments Made Easy
 */

@WebServlet(urlPatterns = { "/5.Recurring/Soap/CreateRecurringPayment" })
public class CreateRecurringPayment extends HttpServlet {

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		/**
		 * SOAP settings
		 * - wsdl: the WSDL url you are using (Test/Live)
		 * - wsUser: your web service user
		 * - wsPassword: your web service user's password
		 */
		String wsdl = "https://pal-test.adyen.com/pal/Payment.wsdl";
		String wsUser = "YourWSUser";
		String wsPassword = "YourWSPassword";

		/**
		 * Create SOAP client, using classes in adyen-wsdl-cxf.jar library (generated by wsdl2java tool, Apache CXF).
		 * 
		 * @see WebContent/WEB-INF/lib/adyen-wsdl-cxf.jar
		 */
		PaymentService service = new PaymentService(new URL(wsdl));
		PaymentPortType client = service.getPaymentHttpPort();

		// Set HTTP Authentication
		((BindingProvider) client).getRequestContext().put(BindingProvider.USERNAME_PROPERTY, wsUser);
		((BindingProvider) client).getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, wsPassword);

		/**
		 * Submitting a recurring payment is done by calling the authorise action on the Payment service with a
		 * paymentRequest. The following fields should be present in the payment request:
		 * 
		 * <pre>
		 * - selectedRecurringDetailReference : The recurringDetailReference you want to use for this payment. The value
		 *                                      LATEST can be used to select the most recently used recurring detail.
		 * - recurring
		 *     - contract       : This should be the same value as recurringContract in the payment where the recurring
		 *                        contract was created. However if ONECLICK,RECURRING was specified initially then this
		 *                        field can be either ONECLICK or RECURRING.
		 * - shopperInteraction : Set to ContAuth if the contract value is RECURRING, or Ecommerce if the contract
		 *                        value is ONECLICK.
		 * 
		 * - merchantAccount    : The merchant account for which you want to process the payment.
		 * - amount
		 *     - currency       : The three character ISO currency code.
		 *     - value          : The transaction amount in minor units (e.g. EUR 1,00 = 100).
		 * - reference          : Your reference for this payment.
		 * - shopperEmail       : The email address of the shopper. This does not have to match the email address
		 *                        supplied with the initial payment since it may have changed in the mean time.
		 * - shopperReference   : The reference to the shopper. This shopperReference must be the same as the
		 *                        shopperReference used in the initial payment.
		 * - shopperIP          : The shopper's IP address. (recommended)
		 * - fraudOffset        : An integer that is added to the normal fraud score. (optional)
		 * - card
		 *     - CVC            : The card validation code. (only required for OneClick card payments)
		 * </pre>
		 */

		// Create new payment request
		PaymentRequest paymentRequest = new PaymentRequest();
		paymentRequest.setMerchantAccount("YourMerchantAccount");
		paymentRequest.setReference("TEST-PAYMENT-" + new SimpleDateFormat("yyyy-MM-dd-HH:mm:ss").format(new Date()));
		paymentRequest.setShopperIP("123.123.123.123");
		paymentRequest.setShopperEmail("test@example.com");
		paymentRequest.setShopperReference("TheShopperReference");
		paymentRequest.setFraudOffset(0);

		// Set amount
		Amount amount = new Amount();
		amount.setCurrency("EUR");
		amount.setValue(199L);
		paymentRequest.setAmount(amount);

		// Set recurring contract
		paymentRequest.setSelectedRecurringDetailReference("LATEST");
		paymentRequest.setShopperInteraction("Ecommerce");

		Recurring recurring = new Recurring();
		recurring.setContract("ONECLICK");
		paymentRequest.setRecurring(recurring);

		// CVC is only required for OneClick card payments
		Card card = new Card();
		card.setCvc("737");
		paymentRequest.setCard(card);

		/**
		 * Send the authorise request.
		 */
		PaymentResult paymentResult;
		try {
			paymentResult = client.authorise(paymentRequest);
		} catch (ServiceException e) {
			throw new ServletException(e);
		}

		/**
		 * If the recurring payment passes validation a risk analysis will be done and, depending on the outcome, an
		 * authorisation will be attempted. You receive a payment response with the following fields:
		 * 
		 * <pre>
		 * - pspReference    : Adyen's unique reference that is associated with the payment.
		 * - resultCode      : The result of the payment. Possible values: Authorised, Refused, Error or Received.
		 * - authCode        : The authorisation code if the payment was successful. Blank otherwise.
		 * - refusalReason   : Adyen's mapped refusal reason, populated if the payment was refused.
		 * </pre>
		 */
		PrintWriter out = response.getWriter();

		out.println("Payment Result:");
		out.println("- pspReference: " + paymentResult.getPspReference());
		out.println("- resultCode: " + paymentResult.getResultCode());
		out.println("- authCode: " + paymentResult.getAuthCode());
		out.println("- refusalReason: " + paymentResult.getRefusalReason());

	}

}
